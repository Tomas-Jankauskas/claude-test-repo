name: Claude Code Action

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  claude-pr:
    # Run if @claude is mentioned in issues or comments
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'assigned') && contains(github.event.issue.body, '@claude'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug Event Information
        run: |
          echo "üîç **GitHub Event Debug Information**"
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue author: ${{ github.event.issue.user.login }}"
          echo "Contains @claude: ${{ contains(github.event.issue.body, '@claude') }}"
          echo "Issue body preview: ${{ github.event.issue.body }}"
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Claude Code Action
        id: claude-action
        uses: anthropics/claude-code-action@beta
        with:
          trigger_phrase: "@claude"
          timeout_minutes: "60"
          max_turns: "20"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          model: "claude-3-7-sonnet-20250219"
          # Use tag mode for @claude mentions
          mode: "tag"
        env:
          DEBUG: "true"
          # Important: docs/prs/ directory exists - use Write tool, not mkdir

      - name: Auto-create PR for documentation
        if: contains(github.event.issue.title, 'Generate documentation for PR')
        uses: actions/github-script@v7
        with:
          script: |
            // Get all branches that start with 'claude/issue-'
            const branches = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Find the most recent claude branch for this issue
            const issueBranches = branches.data.filter(branch => 
              branch.name.startsWith(`claude/issue-${context.payload.issue.number}-`)
            );
            
            if (issueBranches.length === 0) {
              console.log('No claude branch found for this issue');
              return;
            }
            
            // Use the first (most recent) branch
            const claudeBranch = issueBranches[0].name;
            console.log(`Found claude branch: ${claudeBranch}`);
            
            // Extract PR number from issue title
            const prMatch = context.payload.issue.title.match(/PR #(\d+)/);
            if (!prMatch) {
              console.log('Could not extract PR number from issue title');
              return;
            }
            const prNumber = prMatch[1];
            
            // Create PR
            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `docs: Add documentation for PR #${prNumber}`,
                head: claudeBranch,
                base: 'main',
                body: `## üìã **Auto-generated Documentation**

            This PR adds comprehensive documentation for PR #${prNumber}.

            ### ü§ñ **Generated by Claude Code Action**
            - Documentation file created in \`docs/prs/\` directory
            - Auto-generated after Claude completed the analysis

            ### üîó **Related Issues**
            Resolves #${context.payload.issue.number}

            **Generated with [Claude Code Action](https://github.com/anthropics/claude-code-action)**`
              });
              
              console.log(`Created PR #${pr.data.number}: ${pr.data.html_url}`);
              
              // Add comment to the issue with PR link
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `‚úÖ **Documentation PR created automatically!**

            üîó **PR #${pr.data.number}**: ${pr.data.html_url}

            Claude has completed the documentation and GitHub Actions automatically created the PR. The documentation is ready for review and merge.`
              });
              
            } catch (error) {
              console.error('Error creating PR:', error);
              
              // Add comment about the error
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `‚ùå **Failed to auto-create PR**

            Claude completed the documentation successfully, but there was an error auto-creating the PR:
            \`\`\`
            ${error.message}
            \`\`\`

            Please create the PR manually using the branch: \`${claudeBranch}\``
              });
            }
